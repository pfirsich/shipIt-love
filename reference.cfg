# This will be parsed for every target platform
[Global] 
# All filepaths that start with these strings (separated by ";") will be excluded from the build 
exclude: dontship;.git 
# /\ will be included (overrides exclude) (mostly empty)
include: 
# The version to pack the game with
version: 0.9.2 
# If this is not set, python will not use the built-in gz module. Otherwise the command will be executed with {0} being replaced with the archive name and {1} with a list of files
# and it doesn't really works for win* targets yet (considering those and the default love-target is the only one implemented, it doesn't really work at all)
zip-cmd: cmd
# This determines the names of the built files. If this is not set it is the name of the configuration file (of course without it's file extension)
name: TestProj
# If this is true, shipIt will output all current options and all files to be packed
verbose: false
# These files (separated by ";" again) will be included in the final archives alongside the built binary and necessary .dlls, etc.
add-to-archive: README.txt

# these options will define _or override_ options on specific platforms. The platform is checked against by checking if pythons platform.platform() begins with the string in the brackets. Sorted by number of matching chars (more specific ones are executed last)
[Windows] 
# The directory every command will be executed in (see pre-build and post-build)
directory: C:\Users\Joel\dev\love\SudoHack 
# This is where the love binaries can be found. This should be an absolute path or a path relative to "directory"!
# Inside it there should be directories for different versions and targets: e.g. love-0.9.2-win64, like here: https://bitbucket.org/rude/love/downloads/
lovedir: C:\Users\Joel\dev\python\shipIt\love 
# if this is set to true, shipIt will not download the respective love binaries, but throw an error if if is not already present
autodownload: false
# which love binaries to build. .love file will always be build. other options are: win32, win64
target: win32;win64
# In this directory the .love files and archives for the full binary packages will be placed, also in this archive + /temp, temporary files (e.g. the .exe) will be placed
target-directory: D:\SudoHack
# this is changes.txt;game.ico;love.ico;readme.txt;love.exe per default and contains the files that will not be included from the love-binary distributions into the archive
love-exclude:

# This command will be executed before anything happens, executed in %directory
pre-build: git clone https://github.com/pfirsich/SudoHack.git 
# This command will be executed when .love (in target-directory) and .exes (in target-directory/temp) are generated and the archive is about to be generated
# If you want to programmatically change your .exe's icon, do it here (that's what I use it for), {0} is the path to the exe
pre-archive: changeIcon.exe
# This command will be executed after the build process is done, executed in target-directory
#post-build: echo DONE